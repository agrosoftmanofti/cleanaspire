@page "/account/signin"
@inject ISignInManagement SignInManagement
@using System.ComponentModel.DataAnnotations
@using CleanAspire.ClientApp.Services.Identity
<PageTitle>@L["Sign In"]</PageTitle>
<MudPaper Elevation="3" Class="pa-8" Width="100%" MaxWidth="500px">
    <div class="d-flex flex-row  align-center gap-3 my-3">
        <MudBlazorLogo Style="with:60px;height:60px"></MudBlazorLogo>
        <MudText Typo="Typo.h5">@L["Blazor WPA"]</MudText>
    </div>
    <div class="d-flex flex-column gap-2">

        <div class="d-flex flex-row gap-1">
            <MudText>@L["Don't have an account?"]</MudText> <MudLink Href="/account/signup">@L["Signup"]</MudLink>
        </div>

        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="d-flex flex-column gap-2">
                <MudTextField @bind-Value="model.Username" For="@(() => model.Username)"
                              Label="@L["User name"]" Placeholder="@L["User name"]"
                              Required="true" RequiredError="@L["user name is required"]">
                </MudTextField>
                <MudTextField InputType="@PasswordInput" @bind-Value="model.Password" For="@(() => model.Password)" Label="@L["Password"]" Placeholder="@L["Password"]" Required="true" RequiredError="@L["Password is required"]" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonPasswordClick" AdornmentAriaLabel="Show Password"></MudTextField>
                <div class="d-flex flex-row align-center justify-space-between">
                    <!-- Remember me -->
                    <MudCheckBox T="bool" @bind-Value="model.RememberMe" Color="Color.Default">
                        @L["Remember me"]
                    </MudCheckBox>
                    <MudLink Href="/account/forgetpassword">@L["Forget password?"]</MudLink>
                </div>

                <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Color="Color.Primary">@L["Sign In"]</MudButton>
            </div>
        </EditForm>
    </div>
    <MudText Typo="Typo.overline" Style="position:absolute; bottom:8px; right:8px;">
        @(AppSettings.Version)
    </MudText>
</MudPaper>
@code {

    private SignInModel model = new SignInModel()
        {
            Username = "Administrator",
            Password = "P@ssw0rd!"
        };

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;


    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            await SignInManagement.LoginAsync(new Api.Client.Models.LoginRequest() { Email = model.Username, Password = model.Password }, model.RememberMe);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(L["Authentication failed.Please check your email and password and try again."], Severity.Error);
        }
    }

    void ButtonPasswordClick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }


    public class SignInModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(30, ErrorMessage = "Password must be between 6 and 30 characters long.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[\W_]).{6,}$", ErrorMessage = "Password must contain at least one letter, one number, and one special character.")]
        public string Password { get; set; } = string.Empty;

        [Display(Name = "Remember Me")]
        public bool RememberMe { get; set; } = true;
    }
}
